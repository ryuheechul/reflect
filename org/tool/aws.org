#+title: Amazon Web Service

* CloudFront Function & Lambda@Edge function
https://aws.amazon.com/lambda/edge/
https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/

[[https://youtu.be/UgFjcNq-yoQ][AWS CloudFront Functions - Release Radar]]

They are similar and both can be triggered by CloudFront events but they differ for:
- CFF is closer to actual edges and LE is at regional edges (fewer than)
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-javascript-runtime-features.html][CFF JavaScript is much more restrictive]]

* Elastic beanstalk PaaS like Server in AWS
https://aws.amazon.com/elasticbeanstalk/

Multiple platforms and languages are possible and documentation for Docker is https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker.html

Example code I wrote - https://github.com/ryuheechul/eb-sqs-imdsv2

* Amazon Simple Queue Service aka SQS
https://aws.amazon.com/sqs/

Supposedly, it should be able replace these stacks - https://stackshare.io/amazon-sqs/alternatives

* Session Manager - aka SSM
** =scp= over SSM
It is mentioned here - https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html#sessions-start-ssh

#+begin_src bash
ssh -i /path/my-key-pair.pem username@instance-id
scp -i /path/my-key-pair.pem /path/ExampleFile.txt username@instance-id:~
#+end_src

Which requires to do something like below - https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-enable-ssh-connections.html
# SSH over Session Manager

#+begin_src conf
host i-* mi-*
    ProxyCommand sh -c "aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"
#+end_src

*** Inconsistent Behavior Between Two Methods

Just to SSH to an instance you can simply =aws ssm start-session --target i-blahblah=

This will allow you to "bypass" these things:
- having to set username manually
  - it has mechanism to figure out which user to connect to and it's mostly likely set to =ec2-user=
- having to add your public key to =/home/ec2-user/.ssh/authorized_keys= manually
- having to expose the network connectivity (ssh port) to public

Really, that's what they basically said as below and it works that way with =aws ssm start-session= (when used directly).

https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager.html
#+begin_quote

No open inbound ports and no need to manage bastion hosts or SSH keys

Leaving inbound SSH ports and remote PowerShell ports open on your managed nodes greatly increases the risk of entities running unauthorized or malicious commands on the managed nodes. Session Manager helps you improve your security posture by letting you close these inbound ports, freeing you from managing SSH keys and certificates, bastion hosts, and jump boxes.
#+end_quote


However, *this behavior is not consistent* as soon as you use =aws ssm start-session= as a ProxyCommand via =ssh= (like the config example above extracted from AWS's document)

If you run a command like this one, =ssh i-blahblah=, you are probably going to face at least two issue

1. You public key auth will fail
2. It uses your local login username not =ec2-user=

/You can say these two issues are actually kind of mentioned in the document but did you really pick that up from the "fine prints"? not me/

You can remediate 1. by adding your public key to =/home/ec2-user/.ssh/authorized_keys= manually.

To remediate 2. you can either =ssh ec2-user@i-blahblah= or add one line as below

#+begin_src diff
  host i-* mi-*
+   User ec2-user
    ProxyCommand sh -c "aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'"
#+end_src

When those are dealt with the result between both =ssh= (with ProxyCommand) and via =aws ssm= should be same.
Which allows us to be able to =scp= finally.

_I didn't use =-i /path/my-key-pair.pem= because my ssh tries the key I want to use automatically which might be the case for you too._

** Closing Note

Also keep that in mind that this whole thing also depends on the user on your host (for example there might be no =ec2-user= on specific host) and it depends on ssm agent on the host (so old version in there might cause other issues)

There are ways to use a different user in case with =aws ssm= which are described at https://aws.amazon.com/premiumsupport/knowledge-center/ssm-session-manager-connect-fail/.

Also if you just need a quick ssh without local setup, it's possible via web console - https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html#start-sys-console.
