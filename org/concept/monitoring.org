#+title: Monitoring / Observability

* Metrics
** The RED Method: key metrics for microservices architecture
/fits well for request based services/
https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/
- (Request) Rate - the number of requests, per second, you services are serving.
- (Request) Errors - the number of failed requests per second.
- (Request) Duration - distributions of the amount of time each request takes.
** The Use Method
/resource-oriented perspective/
- https://www.brendangregg.com/usemethod.html
  - Utilization: the average time that the resource was busy servicing work
    - /as a percent over a time interval. eg, "one disk is running at 90% utilization"./
  - Saturation: the degree to which the resource has extra work which it can't service, often queued
    - /as a queue length. eg, "the CPUs have an average run queue length of four"./
  - Errors: the count of error events
    - /scalar counts. eg, "this network interface has had fifty late collisions"./
- https://www.circonus.com/2017/08/system-monitoring-with-the-use-dashboard/
** The Four Golden Signals
https://sre.google/sre-book/monitoring-distributed-systems/
- Latency
- Traffic
- Errors
- Saturation

* OpenMetrics
https://openmetrics.io/
Basically Prometheus format evolved into open metrics format so this format can be used more widely at different tools

* OpenTelemetry
https://opentelemetry.io/
#+begin_quote
OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) to help you analyze your softwareâ€™s performance and behavior.

OpenTelemetry is generally available across  [[https://opentelemetry.io/docs/instrumentation/][several languages]] and is suitable for use.
#+end_quote

https://github.blog/2021-05-26-why-and-how-github-is-adopting-opentelemetry/
https://docs.datadoghq.com/tracing/trace_collection/open_standards/

** Relationship with Vector
https://vector.dev/docs/setup/going-to-prod/architecting/

* OpenMetrics and OpenTelemetry together
They both are CNCF projects
- https://signoz.io/blog/openmetrics-vs-opentelemetry/
- https://opentelemetry.io/docs/reference/specification/compatibility/openmetrics/

So a meaning of OpenTelemetry and OpenMetrics could be like using a OpenTelemetry client (i.e. [[https://opentelemetry.io/docs/instrumentation/js/getting-started/nodejs/][NodeJS]]) to export metrics (i.e. instead of =prom-client=) and the OpenMetrics format could be ingested into different backend (i.e. Datadog)

* ETC
https://cloud.google.com/blog/products/devops-sre/welcome-to-the-museum-of-modern-borgmon-art
